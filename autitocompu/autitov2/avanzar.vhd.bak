-- Copyright (C) 1991-2013 Altera Corporation
-- Your use of Altera Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Altera Program License 
-- Subscription Agreement, Altera MegaCore Function License 
-- Agreement, or other applicable license agreement, including, 
-- without limitation, that your use is for the sole purpose of 
-- programming logic devices manufactured by Altera and sold by 
-- Altera or its authorized distributors.  Please refer to the 
-- applicable agreement for further details.

-- Generated by Quartus II Version 13.1.0 Build 162 10/23/2013 SJ Web Edition
-- Created on Mon Nov 11 15:15:26 2024

LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY avanzar IS
    PORT (
        reset : IN STD_LOGIC := '0';
        clock : IN STD_LOGIC;
        SENSOR_D : IN STD_LOGIC_VECTOR(11 DOWNTO 0) := "000000000000";
        SENSOR_I : IN STD_LOGIC_VECTOR(11 DOWNTO 0) := "000000000000";
        SALIDA_I : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
        SALIDA_D : OUT STD_LOGIC_VECTOR(1 DOWNTO 0)
    );
END avanzar;

ARCHITECTURE BEHAVIOR OF avanzar IS
    TYPE type_fstate IS (Avanzar,CORRECCION_D,CORRECION_I);
    SIGNAL fstate : type_fstate;
    SIGNAL reg_fstate : type_fstate;
BEGIN
    PROCESS (clock,reg_fstate)
    BEGIN
        IF (clock='1' AND clock'event) THEN
            fstate <= reg_fstate;
        END IF;
    END PROCESS;

    PROCESS (fstate,reset,SENSOR_D,SENSOR_I)
    BEGIN
        IF (reset='1') THEN
            reg_fstate <= Avanzar;
            SALIDA_I <= "00";
            SALIDA_D <= "00";
        ELSE
            SALIDA_I <= "00";
            SALIDA_D <= "00";
            CASE fstate IS
                WHEN Avanzar =>
                    IF ((((SENSOR_D(11 DOWNTO 0) <= "001011101110") AND (SENSOR_I(11 DOWNTO 0) > "001011101110")) OR ((SENSOR_D(11 DOWNTO 0) <= "001011101110") AND (SENSOR_I(11 DOWNTO 0) <= "001011101110")))) THEN
                        reg_fstate <= CORRECCION_D;
                    ELSIF (((SENSOR_I(11 DOWNTO 0) <= "001011101110") AND (SENSOR_D(11 DOWNTO 0) > "001011101110"))) THEN
                        reg_fstate <= CORRECION_I;
                    ELSIF (((SENSOR_D(11 DOWNTO 0) > "001011101110") AND (SENSOR_I(11 DOWNTO 0) > "001011101110"))) THEN
                        reg_fstate <= Avanzar;
                    -- Inserting 'else' block to prevent latch inference
                    ELSE
                        reg_fstate <= Avanzar;
                    END IF;

                    SALIDA_I <= "10";

                    SALIDA_D <= "10";
                WHEN CORRECCION_D =>
                    IF (((SENSOR_D(11 DOWNTO 0) >= "001011101110") AND (SENSOR_D(11 DOWNTO 0) >= "001011101110"))) THEN
                        reg_fstate <= Avanzar;
                    -- Inserting 'else' block to prevent latch inference
                    ELSE
                        reg_fstate <= CORRECCION_D;
                    END IF;

                    SALIDA_I <= "01";

                    SALIDA_D <= "10";
                WHEN CORRECION_I =>
                    IF (((SENSOR_I(11 DOWNTO 0) >= "001011101110") AND (SENSOR_D(11 DOWNTO 0) >= "001011101110"))) THEN
                        reg_fstate <= Avanzar;
                    -- Inserting 'else' block to prevent latch inference
                    ELSE
                        reg_fstate <= CORRECION_I;
                    END IF;

                    SALIDA_I <= "10";

                    SALIDA_D <= "01";
                WHEN OTHERS => 
                    SALIDA_I <= "XX";
                    SALIDA_D <= "XX";
                    report "Reach undefined state";
            END CASE;
        END IF;
    END PROCESS;
END BEHAVIOR;
