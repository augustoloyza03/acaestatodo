// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/29/2024 19:53:04"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    fin
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module fin_vlg_sample_tst(
	ADC_DOUT,
	clk50M,
	reset,
	s,
	sensor,
	sampler_tx
);
input  ADC_DOUT;
input  clk50M;
input  reset;
input  s;
input  sensor;
output sampler_tx;

reg sample;
time current_time;
always @(ADC_DOUT or clk50M or reset or s or sensor)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module fin_vlg_check_tst (
	01,
	ADC_CS_N21,
	ADC_DIN22,
	ADC_SCLK20,
	aleb,
	ea,
	eg,
	Md0,
	Md1,
	Mi0,
	Mi1,
	o0,
	pin_name1,
	q,
	velD,
	velI,
	sampler_rx
);
input  01;
input  ADC_CS_N21;
input  ADC_DIN22;
input  ADC_SCLK20;
input  aleb;
input  ea;
input  eg;
input  Md0;
input  Md1;
input  Mi0;
input  Mi1;
input  o0;
input  pin_name1;
input [15:0] q;
input  velD;
input  velI;
input sampler_rx;

reg  01_expected;
reg  ADC_CS_N21_expected;
reg  ADC_DIN22_expected;
reg  ADC_SCLK20_expected;
reg  aleb_expected;
reg  ea_expected;
reg  eg_expected;
reg  Md0_expected;
reg  Md1_expected;
reg  Mi0_expected;
reg  Mi1_expected;
reg  o0_expected;
reg  pin_name1_expected;
reg [15:0] q_expected;
reg  velD_expected;
reg  velI_expected;

reg  01_prev;
reg  ADC_CS_N21_prev;
reg  ADC_DIN22_prev;
reg  ADC_SCLK20_prev;
reg  aleb_prev;
reg  ea_prev;
reg  eg_prev;
reg  Md0_prev;
reg  Md1_prev;
reg  Mi0_prev;
reg  Mi1_prev;
reg  o0_prev;
reg  pin_name1_prev;
reg [15:0] q_prev;
reg  velD_prev;
reg  velI_prev;

reg  01_expected_prev;
reg  aleb_expected_prev;
reg  ea_expected_prev;
reg  eg_expected_prev;
reg  Md0_expected_prev;
reg  Md1_expected_prev;
reg  Mi0_expected_prev;
reg  Mi1_expected_prev;
reg  o0_expected_prev;
reg  pin_name1_expected_prev;
reg [15:0] q_expected_prev;

reg  last_01_exp;
reg  last_aleb_exp;
reg  last_ea_exp;
reg  last_eg_exp;
reg  last_Md0_exp;
reg  last_Md1_exp;
reg  last_Mi0_exp;
reg  last_Mi1_exp;
reg  last_o0_exp;
reg  last_pin_name1_exp;
reg [15:0] last_q_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:16] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 16'b1;
end

// update real /o prevs

always @(trigger)
begin
	01_prev = 01;
	ADC_CS_N21_prev = ADC_CS_N21;
	ADC_DIN22_prev = ADC_DIN22;
	ADC_SCLK20_prev = ADC_SCLK20;
	aleb_prev = aleb;
	ea_prev = ea;
	eg_prev = eg;
	Md0_prev = Md0;
	Md1_prev = Md1;
	Mi0_prev = Mi0;
	Mi1_prev = Mi1;
	o0_prev = o0;
	pin_name1_prev = pin_name1;
	q_prev = q;
	velD_prev = velD;
	velI_prev = velI;
end

// update expected /o prevs

always @(trigger)
begin
	01_expected_prev = 01_expected;
	aleb_expected_prev = aleb_expected;
	ea_expected_prev = ea_expected;
	eg_expected_prev = eg_expected;
	Md0_expected_prev = Md0_expected;
	Md1_expected_prev = Md1_expected;
	Mi0_expected_prev = Mi0_expected;
	Mi1_expected_prev = Mi1_expected;
	o0_expected_prev = o0_expected;
	pin_name1_expected_prev = pin_name1_expected;
	q_expected_prev = q_expected;
end



// expected o0
initial
begin
	o0_expected = 1'bX;
end 

// expected 01
initial
begin
	01_expected = 1'bX;
end 

// expected aleb
initial
begin
	aleb_expected = 1'bX;
end 

// expected ea
initial
begin
	ea_expected = 1'bX;
end 

// expected eg
initial
begin
	eg_expected = 1'bX;
end 

// expected Md0
initial
begin
	Md0_expected = 1'bX;
end 

// expected Md1
initial
begin
	Md1_expected = 1'bX;
end 

// expected Mi0
initial
begin
	Mi0_expected = 1'bX;
end 

// expected Mi1
initial
begin
	Mi1_expected = 1'bX;
end 

// expected pin_name1
initial
begin
	pin_name1_expected = 1'bX;
end 
// expected q[ 15 ]
initial
begin
	q_expected[15] = 1'bX;
end 
// expected q[ 14 ]
initial
begin
	q_expected[14] = 1'bX;
end 
// expected q[ 13 ]
initial
begin
	q_expected[13] = 1'bX;
end 
// expected q[ 12 ]
initial
begin
	q_expected[12] = 1'bX;
end 
// expected q[ 11 ]
initial
begin
	q_expected[11] = 1'bX;
end 
// expected q[ 10 ]
initial
begin
	q_expected[10] = 1'bX;
end 
// expected q[ 9 ]
initial
begin
	q_expected[9] = 1'bX;
end 
// expected q[ 8 ]
initial
begin
	q_expected[8] = 1'bX;
end 
// expected q[ 7 ]
initial
begin
	q_expected[7] = 1'bX;
end 
// expected q[ 6 ]
initial
begin
	q_expected[6] = 1'bX;
end 
// expected q[ 5 ]
initial
begin
	q_expected[5] = 1'bX;
end 
// expected q[ 4 ]
initial
begin
	q_expected[4] = 1'bX;
end 
// expected q[ 3 ]
initial
begin
	q_expected[3] = 1'bX;
end 
// expected q[ 2 ]
initial
begin
	q_expected[2] = 1'bX;
end 
// expected q[ 1 ]
initial
begin
	q_expected[1] = 1'bX;
end 
// expected q[ 0 ]
initial
begin
	q_expected[0] = 1'bX;
end 
// generate trigger
always @(01_expected or 01 or ADC_CS_N21_expected or ADC_CS_N21 or ADC_DIN22_expected or ADC_DIN22 or ADC_SCLK20_expected or ADC_SCLK20 or aleb_expected or aleb or ea_expected or ea or eg_expected or eg or Md0_expected or Md0 or Md1_expected or Md1 or Mi0_expected or Mi0 or Mi1_expected or Mi1 or o0_expected or o0 or pin_name1_expected or pin_name1 or q_expected or q or velD_expected or velD or velI_expected or velI)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected 01 = %b | expected ADC_CS_N21 = %b | expected ADC_DIN22 = %b | expected ADC_SCLK20 = %b | expected aleb = %b | expected ea = %b | expected eg = %b | expected Md0 = %b | expected Md1 = %b | expected Mi0 = %b | expected Mi1 = %b | expected o0 = %b | expected pin_name1 = %b | expected q = %b | expected velD = %b | expected velI = %b | ",01_expected_prev,ADC_CS_N21_expected_prev,ADC_DIN22_expected_prev,ADC_SCLK20_expected_prev,aleb_expected_prev,ea_expected_prev,eg_expected_prev,Md0_expected_prev,Md1_expected_prev,Mi0_expected_prev,Mi1_expected_prev,o0_expected_prev,pin_name1_expected_prev,q_expected_prev,velD_expected_prev,velI_expected_prev);
	$display("| real 01 = %b | real ADC_CS_N21 = %b | real ADC_DIN22 = %b | real ADC_SCLK20 = %b | real aleb = %b | real ea = %b | real eg = %b | real Md0 = %b | real Md1 = %b | real Mi0 = %b | real Mi1 = %b | real o0 = %b | real pin_name1 = %b | real q = %b | real velD = %b | real velI = %b | ",01_prev,ADC_CS_N21_prev,ADC_DIN22_prev,ADC_SCLK20_prev,aleb_prev,ea_prev,eg_prev,Md0_prev,Md1_prev,Mi0_prev,Mi1_prev,o0_prev,pin_name1_prev,q_prev,velD_prev,velI_prev);
`endif
	if (
		( 01_expected_prev !== 1'bx ) && ( 01_prev !== 01_expected_prev )
		&& ((01_expected_prev !== last_01_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port 01 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", 01_expected_prev);
		$display ("     Real value = %b", 01_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_01_exp = 01_expected_prev;
	end
	if (
		( aleb_expected_prev !== 1'bx ) && ( aleb_prev !== aleb_expected_prev )
		&& ((aleb_expected_prev !== last_aleb_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aleb :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aleb_expected_prev);
		$display ("     Real value = %b", aleb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_aleb_exp = aleb_expected_prev;
	end
	if (
		( ea_expected_prev !== 1'bx ) && ( ea_prev !== ea_expected_prev )
		&& ((ea_expected_prev !== last_ea_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ea :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ea_expected_prev);
		$display ("     Real value = %b", ea_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ea_exp = ea_expected_prev;
	end
	if (
		( eg_expected_prev !== 1'bx ) && ( eg_prev !== eg_expected_prev )
		&& ((eg_expected_prev !== last_eg_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port eg :: @time = %t",  $realtime);
		$display ("     Expected value = %b", eg_expected_prev);
		$display ("     Real value = %b", eg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_eg_exp = eg_expected_prev;
	end
	if (
		( Md0_expected_prev !== 1'bx ) && ( Md0_prev !== Md0_expected_prev )
		&& ((Md0_expected_prev !== last_Md0_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Md0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Md0_expected_prev);
		$display ("     Real value = %b", Md0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Md0_exp = Md0_expected_prev;
	end
	if (
		( Md1_expected_prev !== 1'bx ) && ( Md1_prev !== Md1_expected_prev )
		&& ((Md1_expected_prev !== last_Md1_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Md1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Md1_expected_prev);
		$display ("     Real value = %b", Md1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Md1_exp = Md1_expected_prev;
	end
	if (
		( Mi0_expected_prev !== 1'bx ) && ( Mi0_prev !== Mi0_expected_prev )
		&& ((Mi0_expected_prev !== last_Mi0_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Mi0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Mi0_expected_prev);
		$display ("     Real value = %b", Mi0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Mi0_exp = Mi0_expected_prev;
	end
	if (
		( Mi1_expected_prev !== 1'bx ) && ( Mi1_prev !== Mi1_expected_prev )
		&& ((Mi1_expected_prev !== last_Mi1_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Mi1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Mi1_expected_prev);
		$display ("     Real value = %b", Mi1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Mi1_exp = Mi1_expected_prev;
	end
	if (
		( o0_expected_prev !== 1'bx ) && ( o0_prev !== o0_expected_prev )
		&& ((o0_expected_prev !== last_o0_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o0_expected_prev);
		$display ("     Real value = %b", o0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_o0_exp = o0_expected_prev;
	end
	if (
		( pin_name1_expected_prev !== 1'bx ) && ( pin_name1_prev !== pin_name1_expected_prev )
		&& ((pin_name1_expected_prev !== last_pin_name1_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pin_name1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pin_name1_expected_prev);
		$display ("     Real value = %b", pin_name1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_pin_name1_exp = pin_name1_expected_prev;
	end
	if (
		( q_expected_prev[0] !== 1'bx ) && ( q_prev[0] !== q_expected_prev[0] )
		&& ((q_expected_prev[0] !== last_q_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_q_exp[0] = q_expected_prev[0];
	end
	if (
		( q_expected_prev[1] !== 1'bx ) && ( q_prev[1] !== q_expected_prev[1] )
		&& ((q_expected_prev[1] !== last_q_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_q_exp[1] = q_expected_prev[1];
	end
	if (
		( q_expected_prev[2] !== 1'bx ) && ( q_prev[2] !== q_expected_prev[2] )
		&& ((q_expected_prev[2] !== last_q_exp[2]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_q_exp[2] = q_expected_prev[2];
	end
	if (
		( q_expected_prev[3] !== 1'bx ) && ( q_prev[3] !== q_expected_prev[3] )
		&& ((q_expected_prev[3] !== last_q_exp[3]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_q_exp[3] = q_expected_prev[3];
	end
	if (
		( q_expected_prev[4] !== 1'bx ) && ( q_prev[4] !== q_expected_prev[4] )
		&& ((q_expected_prev[4] !== last_q_exp[4]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_q_exp[4] = q_expected_prev[4];
	end
	if (
		( q_expected_prev[5] !== 1'bx ) && ( q_prev[5] !== q_expected_prev[5] )
		&& ((q_expected_prev[5] !== last_q_exp[5]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_q_exp[5] = q_expected_prev[5];
	end
	if (
		( q_expected_prev[6] !== 1'bx ) && ( q_prev[6] !== q_expected_prev[6] )
		&& ((q_expected_prev[6] !== last_q_exp[6]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_q_exp[6] = q_expected_prev[6];
	end
	if (
		( q_expected_prev[7] !== 1'bx ) && ( q_prev[7] !== q_expected_prev[7] )
		&& ((q_expected_prev[7] !== last_q_exp[7]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_q_exp[7] = q_expected_prev[7];
	end
	if (
		( q_expected_prev[8] !== 1'bx ) && ( q_prev[8] !== q_expected_prev[8] )
		&& ((q_expected_prev[8] !== last_q_exp[8]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_q_exp[8] = q_expected_prev[8];
	end
	if (
		( q_expected_prev[9] !== 1'bx ) && ( q_prev[9] !== q_expected_prev[9] )
		&& ((q_expected_prev[9] !== last_q_exp[9]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_q_exp[9] = q_expected_prev[9];
	end
	if (
		( q_expected_prev[10] !== 1'bx ) && ( q_prev[10] !== q_expected_prev[10] )
		&& ((q_expected_prev[10] !== last_q_exp[10]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_q_exp[10] = q_expected_prev[10];
	end
	if (
		( q_expected_prev[11] !== 1'bx ) && ( q_prev[11] !== q_expected_prev[11] )
		&& ((q_expected_prev[11] !== last_q_exp[11]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_q_exp[11] = q_expected_prev[11];
	end
	if (
		( q_expected_prev[12] !== 1'bx ) && ( q_prev[12] !== q_expected_prev[12] )
		&& ((q_expected_prev[12] !== last_q_exp[12]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_q_exp[12] = q_expected_prev[12];
	end
	if (
		( q_expected_prev[13] !== 1'bx ) && ( q_prev[13] !== q_expected_prev[13] )
		&& ((q_expected_prev[13] !== last_q_exp[13]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_q_exp[13] = q_expected_prev[13];
	end
	if (
		( q_expected_prev[14] !== 1'bx ) && ( q_prev[14] !== q_expected_prev[14] )
		&& ((q_expected_prev[14] !== last_q_exp[14]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_q_exp[14] = q_expected_prev[14];
	end
	if (
		( q_expected_prev[15] !== 1'bx ) && ( q_prev[15] !== q_expected_prev[15] )
		&& ((q_expected_prev[15] !== last_q_exp[15]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_q_exp[15] = q_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module fin_vlg_vec_tst();
// constants                                           
// general purpose registers
reg ADC_DOUT;
reg clk50M;
reg reset;
reg s;
reg sensor;
// wires                                               
wire 01;
wire ADC_CS_N21;
wire ADC_DIN22;
wire ADC_SCLK20;
wire aleb;
wire ea;
wire eg;
wire Md0;
wire Md1;
wire Mi0;
wire Mi1;
wire o0;
wire pin_name1;
wire [15:0] q;
wire velD;
wire velI;

wire sampler;                             

// assign statements (if any)                          
fin i1 (
// port map - connection between master ports and signals/registers   
	.\01 (01),
	.ADC_CS_N21(ADC_CS_N21),
	.ADC_DIN22(ADC_DIN22),
	.ADC_DOUT(ADC_DOUT),
	.ADC_SCLK20(ADC_SCLK20),
	.aleb(aleb),
	.clk50M(clk50M),
	.ea(ea),
	.eg(eg),
	.Md0(Md0),
	.Md1(Md1),
	.Mi0(Mi0),
	.Mi1(Mi1),
	.o0(o0),
	.pin_name1(pin_name1),
	.q(q),
	.reset(reset),
	.s(s),
	.sensor(sensor),
	.velD(velD),
	.velI(velI)
);

// clk50M
always
begin
	clk50M = 1'b0;
	clk50M = #10000 1'b1;
	#10000;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #180000 1'b1;
end 

// s
initial
begin
	s = 1'b1;
end 

// sensor
initial
begin
	sensor = 1'b1;
end 

fin_vlg_sample_tst tb_sample (
	.ADC_DOUT(ADC_DOUT),
	.clk50M(clk50M),
	.reset(reset),
	.s(s),
	.sensor(sensor),
	.sampler_tx(sampler)
);

fin_vlg_check_tst tb_out(
	.01(01),
	.ADC_CS_N21(ADC_CS_N21),
	.ADC_DIN22(ADC_DIN22),
	.ADC_SCLK20(ADC_SCLK20),
	.aleb(aleb),
	.ea(ea),
	.eg(eg),
	.Md0(Md0),
	.Md1(Md1),
	.Mi0(Mi0),
	.Mi1(Mi1),
	.o0(o0),
	.pin_name1(pin_name1),
	.q(q),
	.velD(velD),
	.velI(velI),
	.sampler_rx(sampler)
);
endmodule

